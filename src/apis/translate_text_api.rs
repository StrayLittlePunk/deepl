/*
 * DeepL API Documentation
 *
 * The DeepL API provides programmatic access to DeepL’s machine translation technology.
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`translate_text`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TranslateTextError {
    Status400(),
    Status403(),
    Status404(),
    Status413(),
    Status414(),
    Status429(),
    Status456(),
    Status500(),
    Status504(),
    Status529(),
    UnknownValue(serde_json::Value),
}


/// The translate function.   The total request body size must not exceed 128 KiB (128 · 1024 bytes). Please split up your text into multiple calls if it exceeds this limit.
pub async fn translate_text(configuration: &configuration::Configuration, text: Vec<String>, target_lang: crate::models::TargetLanguage, source_lang: Option<crate::models::SourceLanguage>, split_sentences: Option<&str>, preserve_formatting: Option<&str>, formality: Option<crate::models::Formality>, glossary_id: Option<&str>, tag_handling: Option<&str>, non_splitting_tags: Option<&str>, outline_detection: Option<&str>, splitting_tags: Option<&str>, ignore_tags: Option<&str>) -> Result<crate::models::TranslateText200Response, Error<TranslateTextError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/translate", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("text", text.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string());
    if let Some(local_var_param_value) = source_lang {
        local_var_form_params.insert("source_lang", local_var_param_value.to_string());
    }
    local_var_form_params.insert("target_lang", target_lang.to_string());
    if let Some(local_var_param_value) = split_sentences {
        local_var_form_params.insert("split_sentences", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = preserve_formatting {
        local_var_form_params.insert("preserve_formatting", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = formality {
        local_var_form_params.insert("formality", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = glossary_id {
        local_var_form_params.insert("glossary_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tag_handling {
        local_var_form_params.insert("tag_handling", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = non_splitting_tags {
        local_var_form_params.insert("non_splitting_tags", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = outline_detection {
        local_var_form_params.insert("outline_detection", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = splitting_tags {
        local_var_form_params.insert("splitting_tags", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = ignore_tags {
        local_var_form_params.insert("ignore_tags", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TranslateTextError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

